Aula 14/03

rafce – cria uma estrutura para iniciar o codigo (tem que instalar a extensão no vscode)

usestate – um hook do react


module.css

children

extensão jsx (página?)
extensão js (componente?)


aplicação do contextProvider e children

dependencias
axios
router-dom
font-awesome (entrar no site e ver o passo a passo para instalar as dependencias)
bootstrap react (entrar no site, primeiro link “get start” aparece o comando do npm)
lodash usar arrays (entrar no site e ver como instala com npm)

reiniciar o servidor para reconhecer as novas dependências


BrowserRouter para criar as rotas

gerador de logo netflix

class NavLink (deixa o link destacado)

tmdb (pegar os filmes)

react-formik adiciona validações no react, entrar no site, verificar o comando para instalar, parar o servidor antes de instalar, depois iniciar o servidor novamente.

Toast react js


node
instalar o express (entra no site do npm e pesquisar pro express, seguir o passo a passo

instalar o nodemon (npm i nodemon), adicionar o script “dev”: “ nodemon index.js”

template engine (handlebars) npm install express-handlebars
verificar a documentação para ver como utilizar

crud → funções básicas para trabalhar com banco de dados
criar / listar / atualizar / deletar

configurar o index.js para receber dados de formulário
app.use(express.urlencoded(extended: true)
app.use(express.json())
------

Roteiro da aula 06/04/22

Node:
criar a pasta
abrir o vs code
no terminal executar npm init (next next next)
criar o arquivo index.js na raiz do projeto
instalar o express: npm install express express-handlesbars nodemon
* area de scrips, onde se cria comandos do linux (no arquivo package.jason
criar o scripr “dev”:”nodemon index.js
* quando for executar o servidor, executar o comando npm run dev

configurar o express
	const express = require(‘express’)
	const app = express()

	app.listen(3000, () => {console.log(‘servidor iniciado’})

configurar rota
criar o arquivo routes.js
	const express = require(‘express’)
	const router = express.Router()

	router.get(‘/’, function (req, res){
		res.send(‘Helo word)
	}
	
	module.exports = router

configurar o arquivo index.js
adicionar app.use(‘/’, router) Obs.: verificar se o router vai ser importado.

Criar a pasta controllers, criar um arquivo ContatosController.js
criar o codigo da classe

class ContatoController {
	
}

modificar o routes.js
router.get(‘/’, ContatosController.index)

criar a pasta views

configurar o handlebars no arquivo index.js

const {engine} = require(‘express-handlebars’)
app.engine(‘handlebars’, engine())
app.set(‘view engine’, ‘handlebars’)
app.set(‘views’, ‘./views’)

criar o index.handlebars na pasta views e criar o código html

criar a pasta layouts dentro da pasta views, criar o arquivo main.handlebars e criar o codigo html

criar a pasta public na raiz do projeto
no index.js colocar app.use(express.static(‘public’))

fazer o crud
fazer uma variavel fake para simular o banco de dados no arquivo ContatosControlle.js

var contatos = [
	{id: 1, nome: ‘Pessoa1’, numero: ‘99-9999-9999’},
	{id: 2, nome: ‘Pessoa2’, numero: ‘99-7777-9999’},
	{id: 3, nome: ‘Pessoa3’, numero: ‘99-8888-9999’}
]

modificar a linha de resposta do método index
res.render(‘index’, {contatos: contatos})

fazer o condigo para exibir os dados no arquivo index.handlebars

criar uma nova rota
router.get(‘/novo’, ContatosController.novo)

editar o controller
static novo(req, res) {
	res.render(‘novo’)
}

criar o arquivo novo.handlebars e editar um formulario
criar a rota /novo do tipo post

editar o index.js para desbloquear o recebimento dos dados do formulario

app.use(express.urlencoded({ extended: true })
app.use(express.json())

editar o controler
static salvarNovo (req, res) {
	const nome = req.body.nome
	const numero = req.body.numero

	contatos.push({
		id: contatos.length + 1,
		nome: nome,
		numero: numero
	})
	res.redirect(‘/’)	
}

...intervalo
rota exluir
controller excluir

atualizar…
criar uma nota rota get (‘/editar/:id’, ContatosContreoller.edit)
criar o metodo edit no controller
criar o editar.handlerbars
criar o botão de editar no index.handlerbars
criar a rota tipo post router.post(‘/editar/:id’, ContatosController.salvarEditar)
criar o metodo no controller


-----
desinstalar o handlebars (npm remove express-handlebar)
comentar todos as linhas que utilizam o handlebar

utilizar o insomnia
instalar o insomnia (baixar de grátis na internet)

para exluir utilizar o método delete

o metodo editar morréu
para editar utilizar o método put


----
11/04
Banco de dados
utilizar o orm sequelize
instalar o sequelize cli
npm install -g sequelize-cli (instala o sequelize globalmente)
depois colocar o sequelize no projeto: npm i sequelize
utilizar o mysql2: npm i mysql2
inicializar o sequelize utilizando o comando sequelize init
configurar o arquivo do banco de dados
criar o banco de dados usando sequelize db:create
criar a tabela contatos usando sequelize migration:generate --name=contatos
editar a migration
executar sequelize db:migrate
criar a model
sequelize model:generate --name=contatos --attributes=id:integer

----
13/04
** rotas no padrao rest
-
criar tabelas de usuarios
sequelize model:generate --name=usuarios --attributes=nome:STRING100,email200,senha:STRING512,data_nascimento:DATEONLY,status:CHAR1
configurar a migrate e a model
executar sequelize db:migrate
criar uma seed
sequelize seed:generate --name=usuarios
-utilizar um modo de criptografar senha
npm bcrypt (ver a documentação)
npm install bcrypt
criar um salt

|const bcrypt = require('bcrypt')
|
|    const salt = await bcrypt.genSalt()
|    const password = await bcrypt.hash('123', salt)
|
|    await queryInterface.bulkInsert('usuarios', [{
|      nome: 'Administrador',
|      email: 'admin@admin.com',
|      senha:'123',
|      data_nascimento: '2001-01-01',
|      status: 'A',
|      createdAt: '2021-01-01 00:00:00',
|      updatedAt: '2021-01-01 00:00:00'
|    }], {});

executar sequelize db:seed --seed=20230413230106-usuarios

fazer o login
1. Rota "/login" - email, senha
2. verificar se usuario existe e esta tivo
3. comparar senha salva


fazer a rota login
|router.post('/login', LoginController.makeLogin)
|const {usuarios} = require("../models")

|class LoginController {
|
|    static async makeLogin(req, res){
|        const { email, senha } = req.body
|
|        const usuarioObj = await usuarios.findOne({
|            where:{
|                email: email,
|                status: 'A'
|            }
|        })
|        if(!usuarioObj){
|            res.status(401).json({
|                error: "Usuário ou senha inválidos"
|            }).end()
|        }
|    }
|}
|module.exports = LoginController

fazer o token do id do usuario
instalar jwt 
npm install jsonwebtoken

|const sucesso = await bcrypt.compare(senha, usuarioObj.senha)
|            if(sucesso){
|                const token = await jwt.sign(usuarioObj.id, '@#@$@#$!')
|                res.json({
|                    token: token
|                })

instalar pacote para configurar o .env
instala o dot env
npm install dotenv

fazer as configurações... olhar a documentação
-----
aula 18/04 autenticação
..
.
.
relacionamentos

--------------------------

projeto
flexfood
criar a pasta flexfood
criar pasta backend
criar pasta frontend
iniciar pelo backend
npm inicio -y
instalar os modulos 
(
npm install expess
npm install mysql2
npm install nodemon --save=dev
npm install sequelize
npm install dotenv
npm install bcrypt
npm install jsonwebtoken
)
configurar o nodemon -> colocar no scrip "dev":"npm run index.js"

criar o arquivo index.js na raiz
const express = require('express')
const app = express()

app.use(express.json())
app.use(express.urlencoded({extended: true})

criar aquivo de rota (seguir os padroes)
criar a pasta chamada routes e nele criar os arquivos de rota
rota publico.js
const express = require('express')
const router = express.Router()

router.get('/', PuclicoController.index)
module.exports = router
 
criar a pasta controller
criar a pasta publico
criar o arquivo PublicoController.js
module.exportes = class PublicoController {
	static index(req, res){
	res.json('sucesso')
}

no arquivo index
app.use('/', router)
app.listem(3000, ()=>{
console.log('servidor iniciado)
}

fazer o brainstorn
funcionalidades
	cadastro de usuarios
		categoria de usuario
			-> usuarios
	cadastro de restaurantes
		endereço
			-> endereços
	cadastro de entregadores
		-> entregadores
	cadastro de produtos
		-> produtos
	cadastro de forma de pagamento
		-> forma de pagamentos
	login
		token de validação
		esqueci a senha
		Login de redes sociais
	produtos favoritos
		-> favoritos_usuarios
	carrinhos de compras
		->pedidos
	menu de busca de produtos ou restaurantes
	cupom de desconto
		-> cupom
	rastreamento e, tempo real do entregador
		->trajetos
	status do pedido
	historico de pedidos
	categoria de entrega (expressa, normal, retirado, agendado)
	agendamento de entrega
	chat de comunicação
	.
	.
	.

npm i -g sequelize-cli
sequelize init (vai criar pastas e arquivos)
criar o arquivo .env
	DB_USER=root
	DB_PASSWORD=
	DB_DATABASE=flexfood
	DB_HOST=127.0.0.1

modificar o arquivo consfig.js
require('dotenv').config()
module.exports = {
  develoment: {
  .
  .
  .
alterar apara a model pegar um arquivo js

criar o banco de dados
sequelize db:create flexfood

criar as models
sequelize model:generate --name-usuarios --attibutes+nome:STRING,emai:STRING,senha:STRING,status:CHAR,tipo:CHAR
* colocar nos campos CHAR o tamanho (1)
sequelize db:migrate

editar a rota publica
router.post('/registrar, 

criar o controller de usuarios
UsuariosController.js

const {usuarios} = require('../models')

module.exports = class UsuariosController{
    static async store(req, res){
        try{
        const = await usuarios.create({
            nome: req.body.nome,
            email: req.body.email,
            status: 'A',
            tipo: req.body.tipo,
            senha: req.body.senha
        })
        }catch(e)
    }
        
editar a Model de usuarios
importar o bcrypt -> 
senha:{
  type: DataTypes.STRING,
  async set(value){
    const salt = waiat bcrypt.genSalt(12)
    const senha = await bcrypt.hast(value, salt)
    this.setDataValue('senha', senha)
    }, {
        fields: ['id', 'email','nome']
    .
    .
    .

criar o fazer login
rota:
router.post('/login, UsuariosController.login)

criar o metodo no crontroller

static async login(req, res){
  const usuario = await usuaris.findOne({
    where:{
      email: req.body.email,
      status: 'A'
    }
    if (usuario){
      const senhaCorreta = await bcryot.compare(req.body.senha, usuario)
      if(senhaCorreta){
        const token = await jwt.sign(usuario.id, JWT_KEY)
      }
      .
      .
      . *tem que importar o jtw e o dotenv
    }else{
      res.status(401).json({
      error: 'usuario ou senha inalidos
    })
    }
  }) ** colocar o codigo no try catch

----
criar o crud de restaurantes
sequelize model:generate --name=restaurante --attibutes=nomes:STRING,logo:STRING,status:CHAR
sequelize db:migrate

criar rota privada
privado.js
  const express = require('express')
  const router = express.Router()
  
  router.get('/', RestauranteController.index
  
  module.exports = router  
  
* criar a Controoler de restaurante
edita o controller de restaurante
editar o arquivo index por causa das duas rotas barras

-----

Swagger -> cria documentação

validação de token

static vaidaToken(req, res, next){
  const token = req.headers['authorization]
  jwt.verify(token, process.env.KWT_KEY, (error, success) =>{
    if(error){
      res.status(401).json({
        error: 'Token invalido'
      })
    }else{
      req.userID = success
      next()
    }
  }


ap.use('/', UsuarioController.validaToken), router)

-----------

criar a model e migration

sequelize model:generate --name=produtos --attibutes=nome:STRING,valor:DECIMAL,foto:STRING,restaurante_id:INTEGER,descricao:TEXT,quantidade_estoque:INTEGER

chave estrangeira
restaurante_id:{
  type: Sequelize.INTEGER,
  references:{
    model: {
      rableName: 'restaurantes'
    },
    key: id
  }
}

sequelize db:migrate

sequelize db:migrate:undo

crud de produtos

primeiro criar o controller

ProdutosController.js

const { produtos } = require('../models')
const { restaurantes } = require('../models')

module.exportes = class ProsutosController {
  static async index(req, res){
    try{
      
    }catch(e){
      
    }
  
  }
  
  static async store(req, res){
    try{
    
      const restaurante = await restaurantes.findOne({
        where: {
          usuario_id: req.usuarioId
        }
      })
    
      await produtos.create({
        nome: req.body.nome,
        valor: req.body.valor,
        foto: req.body.foto,
        restaurante_id: restaurante.id
      })
    }catch(e){
      res.status(500).json({
        error: e.message
      })
    }
    
    res.json('ok')
  }
  
  static async update(req, res){
  
  }
  
  static async destroy(req, res){
  
  }
  
}


rotas

router.post('/produtos', ProdutosController.store)

-----
lado do cliente

----
tabela intermediaria

sequelize model:generate --name=produtos_favoritos --attibutes=usuario_id:INTEGER,prodto_id:INTEGER





